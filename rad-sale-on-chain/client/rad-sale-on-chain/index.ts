import * as Lucid from 'lucid-cardano'
import * as Wallet from '../wallet'
var { Elm } = require('./RadSaleOnChain.elm')

const
    bk = "testnetwIyK8IphOti170JCngH0NedP0yK8wBZs"
    , blockfrostApi = 'https://cardano-testnet.blockfrost.io/api/v0'
    , blockfrostClient = new Lucid.Blockfrost(blockfrostApi, bk)
    , lucid = await Lucid.Lucid.new(blockfrostClient,
        'Testnet')
    , scriptCBORHex = ''
    , datum = Lucid.Data.empty()
    , currencySymbol = '641593ca39c5cbd3eb314533841d53e61ebf6ee7a0ec7c391652f31e'
    , assetNameHex = '43617264616e6961466f756e646572477265656e'
    , radSaleScript: Lucid.Script = {
        type: 'PlutusV1'
        , script: scriptCBORHex
    }
    , scriptAddress = lucid.utils.validatorToAddress(radSaleScript)
    , minLovelaceAmount = BigInt(2000000)
    , priceOfTokenLovelace = BigInt(10000000)
    , datumHash = '923918e403bf43c34b4ef6b48eb2ee04babed17320d8d1b9ff9ad086e86f44ec'
    ,
    startContract = async () => {
        const transaction =
            await lucid
                .newTx()
                .payToContract(scriptAddress
                    , datum
                    , {
                        lovelace: minLovelaceAmount,
                        [currencySymbol + assetNameHex]: BigInt(3)
                    })
                .complete()
            , signedTx = await transaction
                .sign()
                .complete()
            , transactionHash = await signedTx
                .submit()
        return transactionHash
    },
    buyContract = async () => {
        const buyRedeemer = new Lucid.Construct(0, [])
            , serializedBuyRedeemer = Lucid.Data.to(buyRedeemer)
            , utxo = (await lucid.utxosAt(scriptAddress))
                .find(utxo => utxo.datumHash === datumHash && utxo.assets[currencySymbol + assetNameHex] !== undefined)
            , assetQuantity = utxo?.assets[currencySymbol + assetNameHex] as bigint
        if (utxo !== undefined) {
            const transaction =
                await lucid
                    .newTx()
                    .payToContract(scriptAddress
                        , datum
                        , {
                            lovelace: minLovelaceAmount,
                            [currencySymbol + assetNameHex]: (assetQuantity - BigInt(1))
                        })
                    .collectFrom([utxo], serializedBuyRedeemer)
                    .attachSpendingValidator(radSaleScript)
                    .addSigner(await lucid.wallet.address())
                    .payToAddress('addr_test1vrh0kkuahtz28qpfdhsx2hm2eekf06des8h03xnm757u65sd6egwy'
                        , { lovelace: priceOfTokenLovelace })
                    .payToAddress(await lucid.wallet.address(), {
                        lovelace: minLovelaceAmount
                        , [currencySymbol + assetNameHex]: BigInt(1)
                    })
                    .complete()
                , signedTx = await transaction
                    .sign()
                    .complete()
                , transactionHash = await signedTx
                    .submit()
            return transactionHash
        }
        else
            console.log('utxo is undefined')
    },
    closeContract = async () => {
        const closeRedeemer = new Lucid.Construct(1, [])
            , serializedCloseRedeemer = Lucid.Data.to(closeRedeemer)
            , utxos = (await lucid.utxosAt(scriptAddress))
                .filter(utxo => utxo.datumHash === datumHash && utxo.assets[currencySymbol + assetNameHex] !== undefined)
            , assetQuantity = utxos.reduce((accumulator: bigint, utxo) => accumulator + (utxo?.assets[currencySymbol + assetNameHex] as bigint), BigInt(0))
            , transaction =
                await lucid
                    .newTx()
                    .payToAddress(await lucid.wallet.address()
                        , {
                            lovelace: minLovelaceAmount
                            , [currencySymbol + assetNameHex]: assetQuantity
                        })
                    .collectFrom(utxos, serializedCloseRedeemer)
                    .attachSpendingValidator(radSaleScript)
                    .addSigner(await lucid.wallet.address())
                    .complete()
            , signedTx = await transaction
                .sign()
                .complete()
            , transactionHash = await signedTx
                .submit()
        return transactionHash
    }

var app = Elm.RadSaleOnChain.init({
    flags: [Wallet.hasWallet(), 'development'],
    node: document.getElementById("elm-app-is-loaded-here")
})

app.ports.connectWallet.subscribe(async supportedWallet => {
    const wallet = await Wallet.getWalletApi(supportedWallet!) as any
    lucid.selectWallet(wallet)
    console.log(wallet)
    app.ports.receiveWalletConnection.send(supportedWallet)
})

app.ports.startContract.subscribe(async () => {
    try {
        const txHash = await startContract()
        txHash ? app.ports.receiveStartContractStatus.send(true)
            : app.ports.receiveStartContractStatus.send(false)
    }
    catch (e) {
        app.ports.receiveStartContractStatus.send(false)
    }
})

app.ports.buyContract.subscribe(async () => {
    try {
        const txHash = await buyContract()
        txHash ? app.ports.receiveBuyContractStatus.send(true)
            : app.ports.receiveBuyContractStatus.send(false)
    }
    catch (e) {
        app.ports.receiveBuyContractStatus.send(false)
    }
})

app.ports.closeContract.subscribe(async () => {
    try {
        const txHash = await closeContract()
        txHash ? app.ports.receiveCloseContractStatus.send(true)
            : app.ports.receiveCloseContractStatus.send(false)
    }
    catch (e) {
        app.ports.receiveCloseContractStatus.send(false)
    }
})