declare var window: any
import './style.css'
import * as Lucid from 'lucid-cardano'

const supportedWallets = [
    'nami',
    'flint',
    'eternl'
]
    , getWalletApi = async namespace => {
        return await ('typhon' === namespace) ?
            window.cardano[namespace]
            :
            window.cardano[namespace].enable()
    }
    , isSupported = type => supportedWallets.includes(type)
    , hasWallet = type => isSupported(type) && window.cardano[type.toLowerCase()] !== undefined
const
    connectButton = document.getElementById('connect'),
    poolId = "pool1m3gg43uhtetn4hmw79u8836dyq8qe4cex8qnn6mks5egza7n6tp",
    bk = "testnetwIyK8IphOti170JCngH0NedP0yK8wBZs",
    connectMessage = "connect wallet",
    buyMessage = "Buy",
    buyingMessage = "Buying...",
    unbuyingMessage = "Unbuying..."
    , successMessage = "Successfully buyd to SUMN!"
    , lucid = await Lucid.Lucid.new(
        new Lucid.Blockfrost('https://cardano-testnet.blockfrost.io/api/v0', bk), 'Testnet')
if (hasWallet('nami') == true) {
    const wallet = await getWalletApi('nami') as any
    lucid.selectWallet(wallet)
    connectButton!.innerText = connectMessage
    const utils = new Lucid.Utils(lucid)
    const paymentAddressDetails = utils.getAddressDetails(await lucid.wallet.address())
    connectButton?.addEventListener('click', async () => {
        connectButton!.innerText = buyMessage
        connectButton?.addEventListener('click', async () => {
            connectButton!.innerText = buyingMessage
            const lovelaceAmount = BigInt(Number(10000000))
            const minLovelaceAmount = BigInt(Number(2000000))
            const redeemer = new Lucid.Construct(0, [])
            const serializedRedeemer = Lucid.Data.to(redeemer)
            const radSaleScript: Lucid.Script = {
                type: 'PlutusV1'
                , script: ''
            }
            console.log(await lucid.wallet.address())
            console.log(paymentAddressDetails)
            const scriptAddress = lucid.utils.validatorToAddress(radSaleScript)
            console.log(scriptAddress)
            const utxo = (await lucid.utxosAt(scriptAddress))[0]
            console.log(utxo)

            const transaction =
                await lucid
                    .newTx()
                    .collectFrom([utxo], serializedRedeemer)
                    .addSigner(await lucid.wallet.address())
                    .payToAddress('addr_test1vrh0kkuahtz28qpfdhsx2hm2eekf06des8h03xnm757u65sd6egwy'
                        , { lovelace: lovelaceAmount })
                    .payToContract(scriptAddress
                        , Lucid.Data.empty()
                        , {
                            lovelace: BigInt(Number(3000000)),
                            'fda1b6b487bee2e7f64ecf24d24b1224342484c0195ee1b7b943db50434c415353494342414259424c55453031': BigInt(Number(3))
                        })
                    .attachSpendingValidator(radSaleScript)
                    .payToAddress(await lucid.wallet.address(), {
                        lovelace: minLovelaceAmount
                        , 'fda1b6b487bee2e7f64ecf24d24b1224342484c0195ee1b7b943db50434c415353494342414259424c55453031': BigInt(Number(1))
                    })

                    .complete()
            transaction.txComplete
            console.log(transaction)
            console.log(transaction.txComplete)
            const signedTx = await transaction
                .sign()
                .complete()
            console.log(signedTx)
            const transactionHash = await signedTx
                .submit()
            console.log(transactionHash)
            transactionHash ?
                connectButton!.innerText = successMessage
                :
                console.log('Transaction Hash', transaction)
        })
    })
}
