declare var window: any
import './style.css'
import * as Lucid from 'lucid-cardano'

const supportedWallets = [
    'nami',
    'flint',
    'eternl'
]
    , getWalletApi = async namespace => {
        return await ('typhon' === namespace) ?
            window.cardano[namespace]
            :
            window.cardano[namespace].enable()
    }
    , isSupported = type => supportedWallets.includes(type)
    , hasWallet = type => isSupported(type) && window.cardano[type.toLowerCase()] !== undefined
const
    connectButton = document.getElementById('connect'),
    poolId = "pool1m3gg43uhtetn4hmw79u8836dyq8qe4cex8qnn6mks5egza7n6tp",
    bk = "testnetwIyK8IphOti170JCngH0NedP0yK8wBZs",
    connectMessage = "connect wallet",
    buyMessage = "Buy",
    buyingMessage = "Buying...",
    unbuyingMessage = "Unbuying..."
    , successMessage = "Successfully buyd to SUMN!"
    , lucid = await Lucid.Lucid.new(
        new Lucid.Blockfrost('https://cardano-testnet.blockfrost.io/api/v0', bk), 'Testnet')
if (hasWallet('nami') == true) {
    const wallet = await getWalletApi('nami') as any
    lucid.selectWallet(wallet)
    connectButton!.innerText = connectMessage
    const utils = new Lucid.Utils(lucid)
    const paymentAddressDetails = utils.getAddressDetails(await lucid.wallet.address())
    connectButton?.addEventListener('click', async () => {
        connectButton!.innerText = buyMessage
        connectButton?.addEventListener('click', async () => {
            connectButton!.innerText = buyingMessage
            const lovelaceAmount = BigInt(Number(10000000))
            const minLovelaceAmount = BigInt(Number(2000000))
            const redeemer = new Lucid.Construct(0, [])
            const serializedRedeemer = Lucid.Data.to(redeemer)
            console.log(await lucid.wallet.address())
            console.log(paymentAddressDetails)
            const transaction =
                await lucid
                    .newTx()
                    .payToAddress('addr_test1vrh0kkuahtz28qpfdhsx2hm2eekf06des8h03xnm757u65sd6egwy'
                        , { lovelace: lovelaceAmount })
                    .payToContract('addr_test1wzrx2p5pz3489fsyce88kedgr93v3uzxfkqq3uhuz2qetkq29hr49'
                        , Lucid.Data.empty()
                        , { lovelace: minLovelaceAmount })
                    .attachSpendingValidator({
                        type: 'PlutusV1'
                        , script: ''
                    })
                    .payToAddress(await lucid.wallet.address(), {
                        lovelace: minLovelaceAmount
                        , '641593ca39c5cbd3eb314533841d53e61ebf6ee7a0ec7c391652f31e43617264616e6961466f756e6465725768697465': BigInt(Number(1))
                    })
                    .collectFrom([{
                        txHash: 'f1256d480a8f069d0f6ff3d9c2de88ba0bbc1de241099c0f09e4cdef4319cf22',
                        outputIndex: 1,
                        assets: {
                            lovelace: BigInt(Number(3000000)),
                            '641593ca39c5cbd3eb314533841d53e61ebf6ee7a0ec7c391652f31e43617264616e6961466f756e6465725768697465': BigInt(Number(1))
                        },
                        address: 'addr_test1wq0vuyskzm0yl8ef0kvysxk6rgcj8ahp5e9njpm3sh2zv9sy32085',
                        datumHash: '923918e403bf43c34b4ef6b48eb2ee04babed17320d8d1b9ff9ad086e86f44ec'
                    },], serializedRedeemer)
                    .addSigner(await lucid.wallet.address())
                    .complete()
            transaction.txComplete
            console.log(transaction)
            console.log(transaction.txComplete)
            const signedTx = await transaction
                .sign()
                .complete()
            console.log(signedTx)
            const transactionHash = await signedTx
                .submit()
            console.log(transactionHash)
            transactionHash ?
                connectButton!.innerText = successMessage
                :
                console.log('Transaction Hash', transaction)
        })
    })
}
